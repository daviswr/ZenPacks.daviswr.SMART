name: ZenPacks.daviswr.SMART

class_relationships:
  - Products.ZenModel.Device.Device(smartStorage) 1:MC SmartStorage(server)

classes:
  SmartStorage:
    base: [zenpacklib.HardDisk]
    label: SMART
    plural_label: SMART
    monitoring_templates:
      - SMART
    properties:
      DEFAULTS:
        type: string
        grid_display: false
        details_display: true
      # smartctl --info
      DevicePath:
        label: Device Path
        short_label: Path
        order: 10
      DeviceModel:
        label: Model
        grid_display: true
        details_display: false
        label_width: 200
        content_width: 200
        order: 11
      SerialNumber:
        label: Serial Number
        short_label: Serial
        order: 20
      FirmwareVersion:
        label: Firmware Version
        short_label: Firmware
        order: 21
      UserCapacity:
        label: Capacity
        short_label: Size
        type: int
        renderer: Zenoss.render.bytesString
        grid_display: true
        order: 15
        label_width: 55
        content_width: 55
      LogicalSector:
        label: Logical Block Size
        short_label: Log. Block
        type: int
        renderer: Zenoss.render.bytesString
        order: 22
      PhysicalSector:
        label: Physical Block Size
        short_label: Phys. Block
        type: int
        renderer: Zenoss.render.bytesString
        order: 23
      RotationRate:
        # Thankfully reports "Solid State Device" if SSD
        label: Rotation Rate
        short_label: Rotation
        order: 24
      FormFactor:
        label: Form Factor
        grid_display: true
        order: 25
      AtaVersion:
        label: ATA Version
        short_label: ATA
        default: Unavailable
        order: 28
      SataVersion:
        label: SATA Version
        short_label: SATA
        default: Unavailable
        details_display: false
        order: 27
      TransportType:
        label: Transport
        short_label: Transport
        default: Unavailable
        order: 26
      SmartSupport:
        label: SMART Support
        short_label: SMART
        type: int
        datapoint: smartctl_smart_enabled
        enum:
          0: "clear"
          1: "critical"
          2: "debug"
        renderer: Zenoss.render.severity
        grid_display: true
        details_display: false
        label_width: 35
        content_width: 35
        order: 13
      # smartctl --get=all
      AamFeature:
        label: Automatic Acoustic Management
        short_label: AAM
        default: Unavailable
        order: 29
      ApmFeature:
        label: Advanced Power Management
        short_label: AAM
        default: Unavailable
        order: 30
      RdLookAhead:
        label: Read Look-Ahead
        default: Unavailable
        details_display: false
        order: 31
      WriteCache:
        label: Write Cache
        default: Unavailable
        details_display: false
        order: 32
      AtaSecurity:
        label: ATA Security
        short_label: Security
        default: Unavailable
        order: 33
      # smartctl --capabilities
      AutoOfflineDataCollection:
        label: Auto Offline Data Collection
        short_label: Offline Collection
        order: 34
      # smartctl --health
      HealthCheck:
        label: Health Check
        short_label: Health
        type: int
        datapoint: smartctl_health_check
        enum:
          0: "clear"
          1: "critical"
          2: "debug"
        renderer: Zenoss.render.severity
        grid_display: true
        details_display: false
        label_width: 35
        content_width: 35
        order: 14


zProperties:
  DEFAULTS:
    category: SMART
  zSmartDiskMapMatch:
    type: string


device_classes:
  /:
    remove: false
    templates:
      SMART:
        targetPythonClass: ZenPacks.daviswr.SMART.SmartStorage
        datasources:
          smartctl:
            type: COMMAND
            usessh: true
            cycletime: 60
            component: "${here/id}"
            parser: ZenPacks.daviswr.SMART.parsers.smartctl
            commandTemplate: |-
              $$ZENOTHING
              smart_path=$$(command -v smartctl)
              if [[ $$smart_path != *smartctl ]]
              then
                  smart_path=$$(whereis smartctl | cut -d' ' -f2)
              fi
              smart_opts="--badsum=ignore --nocheck=standby --quietmode=noserial"
              smart_logs="--log=scttemp --log=devstat --log=ssd --log=sataphy --log=sasphy"
              info_cmd="$$smart_path --info --health --attributes $$smart_logs $$smart_opts"
              health_cmd="$$smart_path --health $$smart_opts"
              permission=$$(eval $$health_cmd ${here/DevicePath} | tail -1)
              if [[ $$permission == *Permission\ denied ]]
              then
                  info_cmd="sudo $$info_cmd"
              fi
              echo "Component: ${here/title}"
              eval $$info_cmd ${here/DevicePath}
            datapoints:
              health_check: GAUGE
              lifetime_health: GAUGE
              overall_health: GAUGE
              pending_sectors: GAUGE
              phy_events: DERIVE_MIN_0
              read_error_health: GAUGE
              reallocated_health: GAUGE
              reallocated_offline: DERIVE_MIN_0
              reallocated_offline_raw: GAUGE
              reallocated_raw: GAUGE
              reallocated_sectors: DERIVE_MIN_0
              smart_enabled: GAUGE
              ssd_health: GAUGE
              temperature_celsius: GAUGE

        thresholds:
          SMART:
            type: MinMaxThreshold
            enabled: true
            dsnames:
              - smartctl_smart_enabled
              - smartctl_health_check
            severity: 4
            eventClass: /Status/SMART
            minval: 0

          Reallocation:
            type: MinMaxThreshold
            enabled: true
            dsnames:
              - smartctl_reallocated_raw
              - smartctl_reallocated_offline_raw
            severity: 5
            eventClass: /Status/SMART
            # 'Failure Trends in a Large Disk Drive Population'
            # by Pinheiro, Weber, and Barroso
            # https://research.google/pubs/pub32774/
            # "After their first reallocation, drives are over 14 times
            # more likely to fail within 60 days than drives without
            # reallocation counts, making the critical threshold for this
            # parameter also one...
            # After the first offline reallocation, drives have over
            # 21 times higher chances of failure within 60 days than
            # drives without offline reallocations; an effect that is
            # again more drastic than total reallocations."
            minval: 0

        graphs:
          Health Score:
            units: percentage
            miny: 0
            maxy: 100
            graphpoints:
                DEFAULTS:
                  lineType: LINE
                  lineWidth: 2
                Overall:
                  dpName: smartctl_overall_health
                  colorindex: 0
                Rated Lifetime:
                  dpName: smartctl_lifetime_health
                  colorindex: 1
                Read Errors:
                  dpName: smartctl_read_error_health
                  colorindex: 2
                Reallocated Sectors:
                  dpName: smartctl_reallocated_health
                  colorindex: 7
                SSD Life:
                  dpName: smartctl_ssd_health
                  colorindex: 10
          Reallocated Sector Count:
            units: sectors
            miny: 0
            graphpoints:
              DEFAULTS:
                lineType: LINE
                lineWidth: 2
                format: "%5.0lf%s"
                rpn: "CEIL"
              Online:
                dpName: smartctl_reallocated_raw
                colorindex: 0
              Offline:
                dpName: smartctl_reallocated_offline_raw
                colorindex: 1
          Reallocation Rate:
            units: sectors
            miny: 0
            graphpoints:
              DEFAULTS:
                lineType: LINE
                lineWidth: 2
                format: "%5.0lf%s"
                rpn: "CEIL"
              Online:
                dpName: smartctl_reallocated_sectors
                colorindex: 0
              Offline:
                dpName: smartctl_reallocated_offline
                colorindex: 1
              Pending:
                dpName: smartctl_pending_sectors
                colorindex: 2
          Temperature:
            units: deg. C
            graphpoints:
              Temperature:
                dpName: smartctl_temperature_celsius
                lineType: LINE
                lineWidth: 2
                colorindex: 0
          PHY Events:
            units: events/sec
            miny: 0
            graphpoints:
              Events:
                dpName: smartctl_phy_events
                lineType: AREA
                colorindex: 0



event_classes:
  /Status/SMART:
    remove: true
    description: Self-Monitoring, Analysis and Reporting Technology
    transform: |-
      #pylint: disable=invalid-name
      from Products.ZenEvents import Event

      from ZenPacks.daviswr.SMART.lib.util import (
          HEALTH_FAILED,
          HEALTH_PASSED,
          HEALTH_UNKNOWN,
          SMART_DISABLED,
          SMART_ENABLED,
          SMART_UNKNOWN,
          )

      current = int(float(evt.current))
      metric = 'SMART status'
      states = dict()
      severity = dict()

      if 'health_check' in evt.eventKey:
          metric = 'Health check'
          states = {
              HEALTH_FAILED: 'failed',
              HEALTH_PASSED: 'passed',
              HEALTH_UNKNOWN: 'result unknown',
              }
          severity = {
              HEALTH_FAILED: Event.Error,
              HEALTH_PASSED: Event.Clear,
              HEALTH_UNKNOWN: Event.Warning,
              }
      elif 'smart_enabled' in evt.eventKey:
          metric = 'SMART'
          states = {
              SMART_DISABLED: 'is disabled',
              SMART_ENABLED: 'is enabled',
              SMART_UNKNOWN: 'state unknown',
              }
          severity = {
              SMART_DISABLED: Event.Error,
              SMART_ENABLED: Event.Clear,
              SMART_UNKNOWN: Event.Warning,
              }
          # Report component as "down" if SMART is disabled
          evt.eventClass = '/Status'

      if 'reallocated' in evt.eventKey:
          # Threshold will set severity to Error
          evt.summary = '{0} sector reallocation has occurred {1} time'.format(
              'Offline' if 'offline' in evt.eventKey else 'Online',
              current
              )
          if current > 1:
              evt.summary += 's'
      else:
          evt.summary = '{0} {1}'.format(metric, states.get(current, 'unknown'))
          evt.severity = severity.get(current, Event.Warning)


process_class_organizers:
  smartmontools:
    remove: true
    process_classes:
      DEFAULTS:
        excludeRegex: "\\b(vim|tail|grep|tar|cat|bash|daemondo)\\b"
        fail_severity: 4

      smartd:
        description: SMART Disk Monitoring Daemon
        includeRegex: smartd
